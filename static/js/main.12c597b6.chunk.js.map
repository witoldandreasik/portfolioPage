{"version":3,"sources":["index.css.js","utils/theme.js","components/LoadingIndicator/LoadingIndicator.css.js","components/LoadingIndicator/LoadingIndicator.js","App.js","serviceWorker.js","index.js"],"names":["createGlobalStyle","colors","purple","normal","dark","StyledLoadingIndicator","styled","div","LoadingIndicator","className","HeaderSection","React","lazy","Container","AboutMe","Skills","Projects","Footer","App","theme","fallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"irBAGeA,kBAAf,KCHe,GACbC,OAAQ,CACNC,OAAQ,CACNC,OAAQ,oBACRC,KAAM,uB,qjCCFZ,IA4CeC,EA5CgBC,IAAOC,IAAV,KCabC,MAXf,WACE,OACE,kBAAC,EAAD,KACE,yBAAKC,UAAU,yCACb,yBAAKA,UAAU,oBACb,kCCFJC,EAAgBC,IAAMC,MAAK,kBAC/B,sDAEIC,EAAYF,IAAMC,MAAK,kBAAM,iCAC7BE,EAAUH,IAAMC,MAAK,kBAAM,gCAC3BG,EAASJ,IAAMC,MAAK,kBAAM,gCAC1BI,EAAWL,IAAMC,MAAK,kBAAM,sDAC5BK,EAASN,IAAMC,MAAK,kBAAM,uDAoBjBM,MAnBf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAeC,MAAOA,GACpB,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAACP,EAAD,KACE,kBAACH,EAAD,MACA,kBAACI,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,WCdQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.12c597b6.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n// import { Normalize } from \"styled-normalize\";\n\nexport default createGlobalStyle`\n\n*{\n  box-sizing:border-box;\n  padding:0;\n  margin:0; \n &::selection {\n          background-color: #6415ff;\n        }\n}\nbody{\n  font-family: 'Monserrat', sans-serif;  \n  &::-webkit-scrollbar {\n  width: 1em;\n}\n \n&::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n}\n \n&::-webkit-scrollbar-thumb {\n  background-color: #6415ff;\n  outline: 1px solid white;\n}\n}\n`;\n","export default {\r\n  colors: {\r\n    purple: {\r\n      normal: \"rgb(100, 21, 255)\",\r\n      dark: \"rgb(100, 21, 200)\",\r\n    },\r\n  },\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledLoadingIndicator = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  .ldio-3svhr5b2saa div {\r\n    position: absolute;\r\n    width: 89.76px;\r\n    height: 89.76px;\r\n    border: 20.4px solid #6415ff;\r\n    border-top-color: transparent;\r\n    border-radius: 50%;\r\n  }\r\n  .ldio-3svhr5b2saa div {\r\n    animation: ldio-3svhr5b2saa 0.7246376811594202s linear infinite;\r\n    top: 102px;\r\n    left: 102px;\r\n  }\r\n  .loadingio-spinner-rolling-uj77snhgbhg {\r\n    width: 204px;\r\n    height: 204px;\r\n    display: inline-block;\r\n    overflow: hidden;\r\n    background: #ffffff;\r\n  }\r\n  .ldio-3svhr5b2saa {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    transform: translateZ(0) scale(1);\r\n    backface-visibility: hidden;\r\n    transform-origin: 0 0;\r\n  }\r\n  .ldio-3svhr5b2saa div {\r\n    box-sizing: content-box;\r\n  }\r\n  @keyframes ldio-3svhr5b2saa {\r\n    0% {\r\n      transform: translate(-50%, -50%) rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: translate(-50%, -50%) rotate(360deg);\r\n    }\r\n  }\r\n`;\r\nexport default StyledLoadingIndicator;\r\n","import React from \"react\";\r\n\r\nimport StyledLoadingIndicator from \"./LoadingIndicator.css\";\r\n\r\nfunction LoadingIndicator() {\r\n  return (\r\n    <StyledLoadingIndicator>\r\n      <div className=\"loadingio-spinner-rolling-uj77snhgbhg\">\r\n        <div className=\"ldio-3svhr5b2saa\">\r\n          <div></div>\r\n        </div>\r\n      </div>\r\n    </StyledLoadingIndicator>\r\n  );\r\n}\r\nexport default LoadingIndicator;\r\n","import React, { Suspense } from \"react\";\n\nimport { ThemeProvider } from \"styled-components\";\nimport GlobalStyles from \"./index.css.js\";\nimport theme from \"./utils/theme\";\nimport LoadingIndicator from \"./components/LoadingIndicator/LoadingIndicator\";\n\nconst HeaderSection = React.lazy(() =>\n  import(\"./components/Header/HeaderSection\")\n);\nconst Container = React.lazy(() => import(\"./components/Container\"));\nconst AboutMe = React.lazy(() => import(\"./components/AboutMe/AboutMe\"));\nconst Skills = React.lazy(() => import(\"./components/Skills/Skills\"));\nconst Projects = React.lazy(() => import(\"./components/Projects/Projects\"));\nconst Footer = React.lazy(() => import(\"./components/Footer/Footer\"));\nfunction App() {\n  return (\n    <>\n      <GlobalStyles />\n      <ThemeProvider theme={theme}>\n        <Suspense fallback={<LoadingIndicator />}>\n          <Container>\n            <HeaderSection />\n            <AboutMe />\n            <Skills />\n            <Projects />\n            <Footer />\n          </Container>\n        </Suspense>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css.js\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}